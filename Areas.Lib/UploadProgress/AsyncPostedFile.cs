// Generated by Reflector from D:\eConsular\src\Areas\Lib\RadWebUI\Areas.Lib.UploadProgress.dll
namespace Areas.Lib.UploadProgress
{
    using System;
    using System.Collections.Specialized;
    using System.IO;
    using Areas.Lib.UploadProgress.AsyncUpload;

    public class AsyncPostedFile : UploadedFile
    {
        private bool _chunkRequest;
        private int _contentLength;
        private string _contentType;
        private string _fileName;
        internal const string FileApiContentTypeKEy = "contentType";
        internal const string FileApiFileNameKey = "fileName";
        private readonly string Path;
        private readonly UploadedFile PostedFile;

        public AsyncPostedFile(UploadedFile postedFile, string fullPath, int contentLength)
        {
            this.PostedFile = postedFile;
            this.Path = fullPath;
            this.Init(contentLength);
        }

        public AsyncPostedFile(UploadedFile postedFile, string fullPath, int contentLength, bool chunkRequest)
            : this(postedFile, fullPath, contentLength)
        {
            this._chunkRequest = chunkRequest;
        }

        private void Init(int cLength)
        {
            this._contentLength = cLength;
            string key = this.PostedFile.GetExtension().ToLowerInvariant().TrimStart(new char[] { '.' });
            if ((this.PostedFile.ContentType == "application/octet-stream") && (key != ".a"))
            {
                if (MimeTypes.Types.ContainsKey(key))
                {
                    this._contentType = MimeTypes.Types[key];
                }
            }
            else
            {
                this._contentType = this.PostedFile.ContentType;
            }
            this._fileName = this.PostedFile.FileName;
        }

        internal virtual void NormalizeWith(NameValueCollection formValues)
        {
            if (!string.IsNullOrEmpty(formValues["fileName"]))
            {
                this._fileName = formValues["fileName"];
            }
            if (!string.IsNullOrEmpty(formValues["contentType"]))
            {
                this._contentType = formValues["contentType"];
            }
        }

        public override void SaveAs(string fullName, bool overwrite)
        {
            if (File.Exists(fullName))
            {
                if (!overwrite)
                {
                    return;
                }
                File.Delete(fullName);
            }
            if (this.ChunkRequest)
            {
                using (FileStream stream = this.InputStream as FileStream)
                {
                    using (FileStream stream2 = new FileStream(fullName, FileMode.OpenOrCreate, FileAccess.Write))
                    {
                        StreamExtensions.CopyTo(stream, stream2);
                    }
                    return;
                }
            }
            this.PostedFile.SaveAs(fullName);
        }

        internal bool ChunkRequest
        {
            get
            {
                return this._chunkRequest;
            }
            set
            {
                this._chunkRequest = value;
            }
        }

        public override int ContentLength
        {
            get
            {
                return this._contentLength;
            }
        }

        public override string ContentType
        {
            get
            {
                return this._contentType;
            }
        }

        public override string FileName
        {
            get
            {
                return this._fileName;
            }
        }

        protected internal override string InputFieldName
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        public override Stream InputStream
        {
            get
            {
                if (this.ChunkRequest)
                {
                    return File.OpenRead(this.Path);
                }
                return this.PostedFile.InputStream;
            }
        }
    }
}
