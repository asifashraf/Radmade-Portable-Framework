// Generated by Reflector from D:\eConsular\src\Areas\Lib\RadWebUI\Areas.Lib.UploadProgress.dll
namespace Areas.Lib.UploadProgress.AsyncUpload
{
    using System;
    using System.Collections.Generic;
    using System.Web.Script.Serialization;
    using Areas.Lib.UploadProgress;

    internal class AsyncUploadConfigurationConverter : JavaScriptConverter
    {
        public override object Deserialize(IDictionary<string, object> dictionary, Type type, JavaScriptSerializer serializer)
        {
            IDictionary<string, object> dictionary2 = dictionary["TimeToLive"] as IDictionary<string, object>;
            IAsyncUploadConfiguration config = Activator.CreateInstance(type) as IAsyncUploadConfiguration;
            long num = Convert.ToInt64(dictionary2["Ticks"]);
            config.TimeToLive = TimeSpan.FromTicks(num);
            object obj2 = typeof(JavaScriptSerializer).GetMethod("ConvertToType", new Type[] { typeof(object) }, null).MakeGenericMethod(new Type[] { type }).Invoke(new JavaScriptSerializer(), new object[] { dictionary });
            return this.MergeDefaultConfiguration(config, (IAsyncUploadConfiguration)obj2);
        }

        private object MergeDefaultConfiguration(IAsyncUploadConfiguration config, IAsyncUploadConfiguration customObject)
        {
            customObject.TimeToLive = config.TimeToLive;
            return customObject;
        }

        public override IDictionary<string, object> Serialize(object obj, JavaScriptSerializer serializer)
        {
            throw new NotImplementedException();
        }

        public override IEnumerable<Type> SupportedTypes
        {
            get
            {
                return new Type[] { typeof(AsyncUploadConfiguration) };
            }
        }
    }
}
