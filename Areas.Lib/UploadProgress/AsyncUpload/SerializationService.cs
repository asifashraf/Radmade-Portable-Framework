// Generated by Reflector from D:\eConsular\src\Areas\Lib\RadWebUI\Areas.Lib.UploadProgress.dll

using System;
using System.Web.Script.Serialization;

namespace Areas.Lib.UploadProgress.AsyncUpload
{
    internal static class SerializationService
    {
        private static void ApplyConverters(Type type, JavaScriptSerializer serializer)
        {
            if (type.GetInterface(typeof(IAsyncUploadConfiguration).FullName) != null)
            {
                serializer.RegisterConverters(new AsyncUploadConfigurationConverter[] { new AsyncUploadConfigurationConverter() });
            }
        }

        internal static object Deserialize(string obj, Type type)
        {
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            ApplyConverters(type, serializer);
            return typeof(JavaScriptSerializer).GetMethod("Deserialize", new Type[] { typeof(string) }, null).MakeGenericMethod(new Type[] { type }).Invoke(serializer, new object[] { obj });
        }

        internal static object Deserialize(string obj, Type type, bool decrypt)
        {
            if (decrypt)
            {
                obj = CryptoService.Decrypt(obj);
            }
            return Deserialize(obj, type);
        }

        internal static string Serialize(object obj)
        {
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            return serializer.Serialize(obj);
        }

        internal static string Serialize(object obj, bool encrypted)
        {
            if (encrypted)
            {
                return CryptoService.Encrypt(Serialize(obj));
            }
            return Serialize(obj);
        }
    }
}
