// Generated by Reflector from D:\areas\Lib\RadWebUI\Areas.Lib.UploadProgress.dll
namespace Areas.Lib.UploadProgress
{
    using System;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Web;
    using System.Web.Script.Serialization;

    using Areas.Lib.UploadProgress.AsyncUpload;
    using Areas.Lib.UploadProgress.Upload;
    using Areas.Lib.UploadProgress.Upload.AsyncUploadModels;

    public class UploadModule : IHttpModule
    {
        private HttpApplication _application;
        private UploadTrackingsService uploadService;
        protected virtual void CaptureWorkerRequest(object sender, EventArgs e)
        {
            //added Timer
            uploadService = new UploadTrackingsService();
            _application = sender as HttpApplication;
            this.Context = this.Application.Context;
            if (this.IsUploadRequest(this.Application))
            {                
                var workerRequestField = this.GetWorkerRequestField();
                if ((workerRequestField != null))
                {
                    var workerRequest = workerRequestField.GetValue(this.Context.Request) as HttpWorkerRequest;
                    if (workerRequest != null)
                    {
                        var progressWorker = this.GetProgressWorker(workerRequest);
                        var uploadContext = this.UpdateUploadContext(progressWorker);
                        workerRequestField.SetValue(this.Context.Request, progressWorker);                      
                        var clientId = HttpContext.Current.Request["RadUrid"];
                        
                        var uploadTimer = new UploadTimer
                        {
                            StartDate = DateTime.Now,
                            Enabled = true,
                            Interval = 8000,
                            UniqueId = HttpContext.Current.Request["RadUrid"],
                            HttpContext = System.Web.HttpContext.Current,
                            ProgressWorkerRequest = progressWorker,
                            RadUploadContext = uploadContext
                        };

                        uploadService.Log(clientId, "UploadModule.CaptureWorkerRequest", "Timer initialized", 
                            null);

                        try
                        {
                            var taskInDatabase = uploadService.CreateTask(uploadTimer.UniqueId, string.Empty);

                            uploadService.Log(clientId, "UploadModule.CaptureWorkerRequest", "uploadService.CreateTask", "Task created");

                            uploadTimer.TaskId = taskInDatabase.TaskId;

                            uploadTimer.Elapsed += (senderObject, args) =>
                            {

                                try
                                {
                                    var timer = senderObject as UploadTimer;

                                    timer.Stop();

                                    var progressContext = RadProgressContext.GetCurrent(timer);

                                    uploadService.Log(clientId, "uploadTimer.Elapsed", "Timer Elapsed start", null);

                                    var serializedData = progressContext.SerializeToString(timer);

                                    uploadService.Log(clientId, "uploadTimer.Elapsed", "serializedData", serializedData);

                                    var jss = new JavaScriptSerializer();

                                    var checkpoint = jss.Deserialize<UploadCheckpointResult>(serializedData);

                                    var updatedTracking = uploadService.UpdateTaskData(timer.TaskId, serializedData, checkpoint);
                                    uploadService.Log(clientId, "uploadTimer.Elapsed", "checkpoint data", checkpoint);
                                    var span = DateTime.Now - updatedTracking.StartTime;

                                    //dispose timer in these cases
                                    if (
                                        (updatedTracking.StartedProgressingAt.IsNotNull() && updatedTracking.InProgress == false)
                                        ||
                                    (span.Hours >= 12)
                                        )
                                    {
                                        uploadService.Log(clientId, "uploadTimer.Elapsed", "(updatedTracking.StartedProgressingAt.IsNotNull() && updatedTracking.InProgress == false) ||(span.Hours >= 12)", "timer.Dispose();");
                                        timer.Dispose();
                                    }
                                    else
                                    {
                                        //start timer again
                                        timer.Start();
                                        uploadService.Log(clientId, "uploadTimer.Elapsed", "Not finished", "timer.Start() again");
                                    }
                                }
                                catch (Exception errorInElapsed)
                                {
                                    uploadService.Log(clientId, "uploadTimer.Elapsed", "Error in timer elapsed", "ERROR OCCUERD", errorInElapsed.Message, errorInElapsed.StackTrace, errorInElapsed.ToString());
                                }

                            }; //end callback

                            //Now start time for the first time
                            uploadService.Log(clientId, "UploadModule.CAptureWorkerRequest",
                                "uploadTimer.Start(First time)", "Before start");
                            uploadTimer.Start();
                            uploadService.Log(clientId, "UploadModule.CAptureWorkerRequest",
                                "uploadTimer.Start(First time)", "After start");
                        }
                        catch (Exception errorCame)
                        {
                            uploadService.Log(clientId, "UploadModule.CAptureWorkerRequest",
                                "Error in CaptureWorkerRequest", "ERROR OCCUERD", errorCame.Message, errorCame.StackTrace, errorCame.ToString());
                        }
                    }
                }
            }
        }

        private RadUploadContext CreateContext(ProgressWorkerRequest progressWorker)
        {
            if (this.IsAsyncUploadRequest)
            {
                RadAsyncUploadContext radAsyncUploadContext = new RadAsyncUploadContext(Context.Request.ContentLength, progressWorker.RequestStateStore);
                radAsyncUploadContext.UploadsInProgress++;
                return radAsyncUploadContext;
            }
            return new RadUploadContext(this.Context.Request.ContentLength, progressWorker.RequestStateStore);
        }

        public void Dispose()
        {
        }

        private ProgressWorkerRequest GetProgressWorker(HttpWorkerRequest workerRequest)
        {
            if (this.IsAsyncUploadRequest)
            {
                return new AsyncProgressWorkerRequest(workerRequest, this.Context.Request);
            }
            return new ProgressWorkerRequest(workerRequest, this.Context.Request);
        }

        private FieldInfo GetWorkerRequestField()
        {
            FieldInfo field = this.Context.Request.GetType().GetField("_wr", BindingFlags.NonPublic | BindingFlags.Instance);
            if (field == null)
            {
                field = this.Context.Request.GetType().GetField("worker_request", BindingFlags.NonPublic | BindingFlags.Instance);
            }
            return field;
        }

        public virtual void Init(HttpApplication app)
        {
            app.PreRequestHandlerExecute += new EventHandler(this.CaptureWorkerRequest);
            app.PostRequestHandlerExecute += new EventHandler(this.ReleaseWorkerRequest);
            app.Error += new EventHandler(this.ReleaseWorkerRequest);
        }

        private bool IsUploadRequest(HttpApplication application)
        {
            return (((application.Request != null) && (application.Request.ContentType != null)) && application.Request.ContentType.ToLower().StartsWith("multipart/form-data"));
        }

        private void ReleaseContexts()
        {
            if (this.IsAsyncUploadRequest)
            {
                var current = RadUploadContext.Current as RadAsyncUploadContext;
                if (current == null)
                {
                    return;
                }
                current.UploadsInProgress--;
                if (current.UploadsInProgress > 0)
                {
                    return;
                }
            }
            RadProgressContext.RemoveProgressContext(this.Context);
            RadUploadContext.RemoveUploadContext(this.Context);
        }

        protected virtual void ReleaseWorkerRequest(object sender, EventArgs e)
        {
            if (this.Application == null)
            {
                this._application = sender as HttpApplication;
            }
            if (this.IsUploadRequest(this.Application))
            {
                FieldInfo workerRequestField = this.GetWorkerRequestField();
                this.ReleaseContexts();
                if ((workerRequestField != null))
                {
                    ProgressWorkerRequest request = workerRequestField.GetValue(this.Context.Request) as ProgressWorkerRequest;
                    if (request != null)
                    {
                        workerRequestField.SetValue(this.Context.Request, request._originalWorkerRequest);
                    }
                }
            }
        }

        private RadUploadContext UpdateUploadContext(ProgressWorkerRequest progressWorker)
        {
            RadUploadContext uploadContext = null;
            if (RadUploadContext.GetCurrent(this.Context) == null)
            {
                uploadContext = RadUploadContext.SetUploadContext(this.Context, this.CreateContext(progressWorker));
            }
            else if (this.IsAsyncUploadRequest)
            {
                var current = RadUploadContext.Current as RadAsyncUploadContext;
                if (current != null)
                {
                    uploadContext = current;
                    current.RequestLength += this.Context.Request.ContentLength;
                    current.UploadsInProgress++;
                }
            }
            return uploadContext;
        }

        private HttpApplication Application
        {
            get
            {
                return this._application;
            }
        }

        public HttpContext Context { get; set; }

        public System.Timers.Timer Timer { get; set; }

        private bool IsAsyncUploadRequest
        {
            get
            {
                return (this.Application.Request.QueryString[HandlerRouter.HandlerUrlKey] == "rau");
            }
        }

        public static bool IsRegistered
        {
            get
            {
                /*if (!SecurityHelper.IsPermissionGranted(new AspNetHostingPermission(AspNetHostingPermissionLevel.High)))
                {
                    return true;
                }
                HttpModuleCollection modules = HttpContext.Current.ApplicationInstance.Modules;
                foreach (string str in modules.AllKeys)
                {
                    if (modules[str] is RadUploadHttpModule)
                    {
                        return true;
                    }
                }*/
                return true;
            }
        }
    }
}
