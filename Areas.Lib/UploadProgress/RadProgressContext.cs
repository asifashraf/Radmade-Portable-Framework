// Generated by Reflector from D:\areas\Lib\RadWebUI\Areas.Lib.UploadProgress.dll

using System.Web.Script.Serialization;

namespace Areas.Lib.UploadProgress
{
    using System;
    using System.IO;
    using System.Web;
    using Areas.Lib.UploadProgress.Upload;
    using Areas.Lib.UploadProgress.Upload.AsyncUploadModels;

    public sealed class RadProgressContext : ProgressData
    {
        private RadProgressContext()
        {
        }

        private static RadProgressContext GetProgressContext(HttpContext context)
        {
            return (context.Application["RadProgressContext" + RadUploadContext.GetUploadUniqueIdentifier(context)] as RadProgressContext);
        }

        private static RadProgressContext GetProgressContext(UploadTimer timer)
        {
            return (timer.HttpContext.Application["RadProgressContext" + timer.UniqueId] as RadProgressContext);
        }

        private ProgressData GetProgressData()
        {
            RadUploadContext current = RadUploadContext.GetCurrent(HttpContext.Current);
            if ((current != null) && !current.UploadComplete)
            {
                return current.GetProgressData();
            }
            return null;
        }

        private ProgressData GetProgressData(RadUploadContext current)
        {
            if ((current != null) && !current.UploadComplete)
            {
                return current.GetProgressData();
            }
            return null;
        }

        private ProgressData GetProgressData(UploadTimer timer)
        {
            RadUploadContext current = timer.RadUploadContext;
            if ((current != null) && !current.UploadComplete)
            {
                return current.GetProgressData();
            }
            return null;
        }

        public static void RemoveProgressContext(HttpContext context)
        {
            context.Application.Remove("RadProgressContext" + RadUploadContext.GetUploadUniqueIdentifier(context));
        }

        public override void Serialize(TextWriter writer)
        {
            ProgressData progressData = this.GetProgressData();
            if (progressData == null)
            {
                base.Serialize(writer);
            }
            else
            {
                progressData.Serialize(writer);
            }
        }

        public string SerializeToString(UploadTimer timer)
        {
            ProgressData progressData = this.GetProgressData(timer);
            if (progressData == null)
            {
                return base.SerializeToString(timer);
            }
            else
            {
                return progressData.SerializeToString(timer);
            }
        }

        public void Serialize(TextWriter writer, bool isJSON)
        {
            if (!isJSON)
            {
                this.Serialize(writer);
            }
            else
            {
                ProgressData progressData = this.GetProgressData();
                if (progressData == null)
                {
                    base.Serialize(writer);
                }
                else
                {
                    var serializer = new JavaScriptSerializer();
                    writer.Write(serializer.Serialize(progressData));
                }
            }
        }

        private static RadProgressContext SetProgressContext(HttpContext context)
        {
            RadProgressContext context2 = new RadProgressContext();
            context.Application["RadProgressContext" + RadUploadContext.GetUploadUniqueIdentifier(context)] = context2;
            return context2;
        }

        private static RadProgressContext SetProgressContext(UploadTimer timer)
        {
            var context2 = new RadProgressContext();
            timer.HttpContext.Application["RadProgressContext" + timer.UniqueId] = context2;
            return context2;
        }

        public static RadProgressContext Current
        {
            get
            {
                RadProgressContext progressContext = GetProgressContext(HttpContext.Current);
                if (progressContext == null)
                {
                    progressContext = SetProgressContext(HttpContext.Current);
                }
                return progressContext;
            }
        }

        public static RadProgressContext GetCurrent(UploadTimer timer)
        {
            var progressContext = GetProgressContext(timer);
            if (progressContext == null)
            {
                progressContext = SetProgressContext(timer);
            }
            return progressContext;
        }
    }
}
