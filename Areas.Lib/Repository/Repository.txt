using Areas.Lib.Repository;
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.Data.Entity;
    using System.Linq;

    public class Repository : IDataRepository, IDisposable
    {
        private CollisionContext db { get; set; }
        
        internal string EfConnectionStringName;
        internal string ConnectionStringName;

        public string ConnectionString { get; set; }
        public string EfConnectionString { get; set; }

        public Repository()
        {
            ConnectionStringName = "DefaultConnection";
            EfConnectionStringName = "CollisionContext";

            ConnectionString = ConfigurationManager.ConnectionStrings[ConnectionStringName].ConnectionString;
            EfConnectionString = ConfigurationManager.ConnectionStrings[EfConnectionStringName].ConnectionString;

            db = new CollisionContext(EfConnectionStringName);
        }        

        public void Dispose()
        {
            db.Dispose();
        }


        public T Create<T>(T entity) where T : class
        {
            var newEntry = db.Set<T>().Add(entity);
            db.SaveChanges();
            return newEntry;
        }

        public IQueryable<T> Read<T>() where T : class
        {
            return db.Set<T>().AsQueryable<T>();
        }

        public void Update<T>(T entity) where T : class
        {
            var entry = db.Entry(entity);
            db.Set<T>().Attach(entity);
            entry.State = EntityState.Modified;
            db.SaveChanges();
        }

        public void Delete<T>(T entity) where T : class
        {
            db.Set<T>().Remove(entity);
                db.SaveChanges();
        }
    }